# /usr/bin/env python3
# -*- coding:utf-8 -*-
'''
this is a program for grain size fitting with weibull distribution
author: Jiabo
GFZ Potsdam
'''

import sys
import os
import gc
import matplotlib
matplotlib.use('Qt5Agg')
from PyQt5 import QtCore
from PyQt5.QtWidgets import (QApplication,QMainWindow,QGridLayout,QSizePolicy,
                             QWidget,QAction,QFileDialog,QPushButton,QTextEdit,
                             QLabel,QLineEdit,QVBoxLayout,QHBoxLayout)
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib import pyplot as plt
from scipy import interpolate
import numpy as np
from lmfit import minimize, Parameters


class MyMplCanvas(FigureCanvas):
    def __init__(self,parent=None,width=5,hight=4,dpi=100,filePath=None,groups=None,sampleIndex=None,
                 initParam=None,paramDict=None):
        self.filePath=filePath
        self.sampleIndex=sampleIndex
        self.groups=groups
        self.initParam=initParam
        self.paramDict=paramDict
        plt.ioff()
        self.fig = plt.figure(figsize=(width,hight),dpi=dpi,facecolor='white')
        self.fig.subplots_adjust(left=0.18, right=0.97,
                        bottom=0.18, top=0.9, wspace=0.5, hspace=0.5)
        self.axes = self.fig.add_subplot(111)
        #self.axes.hold(False)
        self.initialplot()
        FigureCanvas.__init__(self,self.fig)
        self.setParent(parent)
        FigureCanvas.setSizePolicy(self,
                                   QSizePolicy.Expanding,
                                   QSizePolicy.Expanding)
        FigureCanvas.updateGeometry(self)
        gc.collect()
    def initialplot(self):
        pass

class dataFit():
    '''
    this is the main part for data fitting

    '''
    def __init__(self,filePath,fitNumber,sampleIndex,initParam):
        self.filePath=filePath
        self.fitNumber=fitNumber
        self.sampleIndex=sampleIndex
        self.initParam=initParam
        self.raw_data()
        self.lmfit()
        #return self.params_fit,self.x_logspace,self.x_fit,self.y_fit,self.x_measure,self.y_measure

    def raw_data(self):
        '''
        loading raw data file, which is the raw data file that
        generated by MircoMag, only if there are more than two
        rows of floats, the program would regard it as correct
        data file.
        Be aware that x_fit using log10 scale for easy fitting,
        and will changed to linear scale for plotting.
        '''
        try:
            with open(self.filePath) as f:
                data = f.readlines()
                line = [lines.split() for lines in data]
            self.samplenumber = [str(i[0]) for i in line]#str(line[self.sampleIndex][0]) #sample_sequence=1
            self.x_measure = np.array(line[0], dtype=np.float64)
            self.y_measure = np.array(line[self.sampleIndex][1:], dtype=np.float64)
            self.x_logspace = np.logspace(np.log10(0.11), np.log10(self.x_measure.max()), 1000)
            self.y_fit = interpolate.splev(self.x_logspace, interpolate.splrep(self.x_measure, self.y_measure))
            self.x_fit = np.array([np.log10(i)+1 for i in self.x_logspace])
        except Exception as e:
            print(str(e))
            print('check your data format')
            pass

    def lmfit(self):
        p,a,b=[float(i) for i in self.initParam]
        param = [p]*self.fitNumber
        param.extend([a]*self.fitNumber)
        param.extend([b]*self.fitNumber)
        params = Parameters()
        for i in np.arange(self.fitNumber):
            p = 'p'+str(i)
            a = 'a'+str(i)
            b = 'b'+str(i)
            if i == 0:
                params.add(p, value=abs(param[i]), min=10**-1)
                params.add(a, value=abs(param[i+self.fitNumber]), min=0.0001)
                params.add(b, value=0.5, min= 0.1, max=1)
            else:
                params.add(p, value=abs(param[i]), min=10**-5)
                params.add(a, value=abs(param[i+self.fitNumber]), min=10**-5)
                params.add(b, value=abs(param[i+2*self.fitNumber]), min= 0.5, max=5)
        paramter_raw= minimize(self.residuals, params, args=(self.x_fit, self.y_fit), method='leastsq')
        self.params_fit = paramter_raw.params

    def residuals(self, params, x, y):
        return y - sum(self.func(x, params))
    def func(self, x, params):
        y_component=[]
        for i in np.arange(self.fitNumber):
            p = params['p' + str(i)].value
            a = params['a' + str(i)].value
            b = params['b' + str(i)].value
            y = p*(a/b)*x**(a-1)*np.exp(-((x/b)**a))
            y_component.append(y)
        return y_component


class FitMplCanvas(MyMplCanvas):
    '''
    this is the ploting part, all the data generated by fitting are assembled here,
    be carefull, the ploting scale of the X axies need to changed to linear scale,
    that is why x_draw = 10**x_fit.

    as well as the Y scale, the fit value and measured gradient value should be
    consistent, as a result, the coefficient p=y_gradient.max()/fit_curve.max()
    is adopted.

    the data for plotting is also for output.
    '''

    def initialplot(self):
        if self.groups==None:
            group=3
        else:
            group=self.groups
        self.fitNumber=int(group)
        dataFit.raw_data(self)
        self.params_fit=dataFit(self.filePath,self.fitNumber,self.sampleIndex,self.initParam).params_fit
        self.fitPlot()
    def fitPlot(self):
        y_component=self.func(self.x_fit, self.params_fit)
        self.axes.scatter(self.x_measure, self.y_measure, facecolors='white', edgecolors='k', s=15, marker='o', alpha=1,
           label='Measured')
        self.axes.plot(self.x_logspace, sum(y_component), '-k', label='Fit')
        self.axes.set_xscale('log')
        self.axes.set_xlim(0.1, 10**3)
        self.axes.set_ylim(0, self.y_measure.max()*1.2)
        self.axes.set_xlabel('Grain Size ('+r'$\mu$'+'m)')
        self.axes.set_ylabel('Content (%)')
        y_sum=sum([sum(y) for y in y_component])
        for i in np.arange(self.fitNumber):
            b = self.params_fit['b' + str(i)].value
            gz=10**(b-1)
            percentage=sum(y_component[i])/y_sum*100
            #print(gz,percentage)
            label=str('%.1f'%gz)+r'$\mu$m  '+str(int(percentage))+'%'
            self.axes.plot(self.x_logspace, y_component[i], label=label)
        plt.legend(frameon=False, fontsize = 13)
    def func(self, x, params):
        return dataFit.func(self,x,params)

class reFitMpl(MyMplCanvas):
    def initialplot(self):
        self.fitNumber=int(self.groups)
        dataFit.raw_data(self)
        self.reFit()

    def reFit(self):
        params = Parameters()
        param = self.paramDict
        for i in np.arange(self.fitNumber):
            p = 'p'+str(i)
            a = 'a'+str(i)
            b = 'b'+str(i)
            pp = 'amplitudeValue-'+str(i)
            aa = 'sigmaValue-'+str(i)
            bb = 'centerValue-'+str(i)
            params.add(p, value=float(param[pp].text()), min=10**-5)
            params.add(a, value=float(param[aa].text()), min=10**-5)
            params.add(b, value=np.log10(float(param[bb].text()))+1, min=10**-5)
        #print(params,self.x_fit,self.y_fit)
        try:
            self.params_fit = minimize(self.residuals, params, args=(self.x_fit, self.y_fit), method='leastsq')
            #print(self.params_fit)
        except Exception as e:
            print(str(e))
            pass

        self.fitPlot()

    def residuals(self, params, x, y):
        #print('residual')
        return y - sum(self.func(x, params))
    def func(self, x, params):
        y_component=[]
        for i in np.arange(self.fitNumber):
            p = params['p' + str(i)].value
            a = params['a' + str(i)].value
            b = params['b' + str(i)].value
            y = p*(a/b)*x**(a-1)*np.exp(-((x/b)**a))
            y_component.append(y)
        #print('func')
        return y_component

        #print('successed')
    def fitPlot(self):
        y_component=self.func(self.x_fit, self.params_fit.params)
        self.axes.scatter(self.x_measure, self.y_measure, facecolors='white', edgecolors='k', s=15, marker='o', alpha=1,
           label='Measured')
        self.axes.plot(self.x_logspace, sum(y_component), '-k', label='Fit')
        self.axes.set_xscale('log')
        self.axes.set_xlim(0.1, 10**3)
        self.axes.set_ylim(0, self.y_measure.max()*1.2)
        self.axes.set_xlabel('Grain Size ('+r'$\mu$'+'m)')
        self.axes.set_ylabel('Content (%)')
        y_sum=sum([sum(y) for y in y_component])
        for i in np.arange(self.fitNumber):
            b = self.params_fit.params['b' + str(i)].value
            gz=10**(b-1)
            percentage=sum(y_component[i])/y_sum*100
            #print(gz,percentage)
            label=str('%.1f'%gz)+r'$\mu$m  '+str(int(percentage))+'%'
            self.axes.plot(self.x_logspace, y_component[i], label=label)
        plt.legend(frameon=False, fontsize = 13)

class adjutFit(MyMplCanvas):
    def initialplot(self):
        self.fitNumber=int(self.groups)
        dataFit.raw_data(self)
        self.rePlot()
        self.Plot()
    def rePlot(self):
        params = Parameters()
        param = self.paramDict
        for i in np.arange(self.fitNumber):
            p = 'p'+str(i)
            a = 'a'+str(i)
            b = 'b'+str(i)
            pp = 'amplitudeValue-'+str(i)
            aa = 'sigmaValue-'+str(i)
            bb = 'centerValue-'+str(i)
            params.add(p, value=float(param[pp].text()), min=10**-5)
            params.add(a, value=float(param[aa].text()), min=10**-5)
            params.add(b, value=np.log10(float(param[bb].text()))+1, min=10**-5)
        self.params_fit=params
    def func(self, x, params):
        return dataFit.func(self,x,params)
    def Plot(self):
        FitMplCanvas.fitPlot(self)

class MyplotMplCanvas(MyMplCanvas):
    def initialplot(self):
        if self.filePath==None:
            self.data_init()
        else:
            self.data_raw()
            gc.collect()
    def data_raw(self):
        dataFit.raw_data(self)
        self.axes.plot(self.x_measure,self.y_measure)
        self.axes.set_xscale('log')
        self.axes.set_xlim(0.1, 10**3)
        self.axes.set_ylim(0, self.y_measure.max()*1.2)
        self.axes.set_xlabel('Grain Size ('+r'$\mu$'+'m)')
        self.axes.set_ylabel('Content (%)')
    def data_init(self):
        self.axes.plot(0,0)
        self.axes.set_xlim(0,1)
        self.axes.set_ylim(0,1)

class Mainwindow(QMainWindow):
    '''
    this is for the interface
    '''
    def __init__(self):
        super().__init__()

        self.clickCount=0

        self.setAttribute(QtCore.Qt.WA_DeleteOnClose)

        self.main_widget = QWidget(self)
        self.grid = QGridLayout(self.main_widget)

        self.introdueLabel = QLabel('Introdcution',self.main_widget)

        #----the first Voulume----#
        dataDispBox = QVBoxLayout()
        self.dataDisp = QTextEdit(self.main_widget)
        self.dataDisp.setLineWrapMode(QTextEdit.NoWrap)
        dataDispBox.addWidget(self.dataDisp)

        #----the second Voulume----#
        self.vbox = QVBoxLayout()
        self.sampleVbox = QVBoxLayout()
        self.btHbox = QHBoxLayout()
        self.initalBox = QVBoxLayout()
        btLoad = QPushButton('Load',self.main_widget)
        btRaw = QPushButton('Raw data', self.main_widget)
        #btAdjust = QPushButton(Adjust)
        numberLabel = QLabel('Numbers',self.main_widget)
        sequencLabel = QLabel('Sample NO.', self.main_widget)
        self.numberText =QLineEdit('3')
        btFit = QPushButton('Fit',self.main_widget)
        btSaveFig = QPushButton('Save Fig', self.main_widget)
        btSaveData = QPushButton('Save Data', self.main_widget)
        self.sequencText = QLineEdit('')
        btPrevious = QPushButton('Previous', self.main_widget)
        btNext = QPushButton('Next', self.main_widget)
        pLabel = QLabel('initial p',self.main_widget)
        aLabel = QLabel('initial a',self.main_widget)
        bLabel = QLabel('initial b',self.main_widget)
        self.pText = QLineEdit('1.0')
        self.aText = QLineEdit('1.0')
        self.bText = QLineEdit('3.5')
        btLoad.clicked.connect(self.loadButton)
        btRaw.clicked.connect(self.rawButton)
        btFit.clicked.connect(self.fitButton)
        btSaveFig.clicked.connect(self.SaveFigButton)
        btSaveData.clicked.connect(self.SaveDataButton)
        btNext.clicked.connect(self.nextButton)
        btPrevious.clicked.connect(self.btPrevious)
        self.sequencText.textChanged.connect(self.sequencChanged)
        self.btHbox.addWidget(btPrevious)
        self.btHbox.addWidget(btNext)
        self.initalBox.addWidget(pLabel)
        self.initalBox.addWidget(self.pText)
        self.initalBox.addWidget(aLabel)
        self.initalBox.addWidget(self.aText)
        self.initalBox.addWidget(bLabel)
        self.initalBox.addWidget(self.bText)
        self.sampleVbox.addWidget(sequencLabel)
        self.sampleVbox.addWidget(self.sequencText)
        self.sampleVbox.addLayout(self.btHbox)
        #self.sampleVbox.addWidget(self.dataDisp,4)

        self.vbox.addWidget(btLoad)
        self.vbox.addLayout(self.sampleVbox)
        self.vbox.addWidget(btRaw)
        self.vbox.addWidget(numberLabel)
        self.vbox.addWidget(self.numberText)
        self.vbox.addWidget(btFit)
        self.vbox.addWidget(btSaveFig)
        self.vbox.addWidget(btSaveData)
        self.vbox.addLayout(self.initalBox)

        #----the third Voulume----#
        plotBox = QGridLayout()
        self.plot = MyplotMplCanvas(self.main_widget,width=5,hight=4,dpi=100,filePath=None)
        plotBox.addWidget(self.plot)
        plotBox.addWidget(self.introdueLabel)


        self.grid.addLayout(self.vbox,1,2,3,1)
        self.grid.addLayout(dataDispBox,1,1,8,1)
        self.grid.addLayout(plotBox,1,3,3,1)
        #self.grid.addLayout(self.initalBox,1,1,1,1)
        self.main_widget.setFocus()
        self.setCentralWidget(self.main_widget)
        self.initUI()
        self.show()

    def initUI(self):
        self.statusBar()

        openfile = QAction('open',self)
        openfile.triggered.connect(self.showDialog)
        quitAction = QAction('quit',self)
        quitAction.triggered.connect(self.fileQuit)

        menubar = self.menuBar()
        menubar.setNativeMenuBar(False)
        filename = menubar.addMenu('&File')
        filename.addAction(openfile)
        filename.addAction(quitAction)

        quitname = menubar.addMenu('&Help')
        menubar.addSeparator()
        quitname.addAction(quitAction)

        self.setGeometry(300,300,800,700)
        self.setWindowTitle('pyIRM')

    def showParams(self):
        subGrid = QGridLayout()
        params = self.plot.params_fit
        self.paramsDict={}
        for i in range(int(self.groups)):
            p = '%.5f'%params['p' + str(i)].value
            a = '%.5f'%params['a' + str(i)].value
            b = params['b' + str(i)].value
            sigmaLable = QLabel('sigma-'+str(i))
            sigmaValue = QLineEdit(str(a))
            centerLable = QLabel('center-'+str(i))
            centerValue = QLineEdit(str('%.5f'%10**(b-1)))
            amplitudeLable = QLabel('Amplitude'+str(i))
            amplitudeValue = QLineEdit(str(p))
            self.paramsDict['sigmaValue-'+str(i)]=sigmaValue
            self.paramsDict['centerValue-'+str(i)]=centerValue
            self.paramsDict['amplitudeValue-'+str(i)]=amplitudeValue
            subGrid.addWidget(sigmaLable,i,0,1,1)
            subGrid.addWidget(sigmaValue,i,1,1,1)
            subGrid.addWidget(centerLable,i,2,1,1)
            subGrid.addWidget(centerValue,i,3,1,1)
            subGrid.addWidget(amplitudeLable,i,4,1,1)
            subGrid.addWidget(amplitudeValue,i,5,1,1)
        for key,value in self.paramsDict.items():
            #print(key,value)
            value.textChanged.connect(self.adjustPlot)
        return subGrid

    def adjustPlot(self):
        if self.plot:
            self.plot.deleteLater()
            plt.close(self.plot.fig)
        self.plot = adjutFit(self.main_widget,width=5,hight=4,dpi=100,filePath=self.filePath,
                                     groups=self.groups,sampleIndex=self.sampleIndex,paramDict=self.paramsDict)
        try:
            self.grid.addWidget(self.plot,1,3,3,1)
            #self.paramsGrid=self.showParams()
            #self.grid.addLayout(self.paramsGrid,6,3,3,2)
        except Exception as e:
            print(str(e))
            pass
    def showDialog(self):
        filename=QFileDialog.getOpenFileName(self,'open file','/home/Documents/python/pyGS')
        if filename[0]:
            f = open(filename[0],'r')
            with f:
                data=f.read()
                self.dataDisp.setText(data)
                self.filePath=filename[0]
                self.workPath=os.path.dirname(filename[0])
            f.close()


    def fileQuit(self):
        print('t')

    def loadButton(self):
        self.statusBar().showMessage(self.sender().text())
        self.showDialog()
    def rawButton(self):
        try:
            self.sampleIndex
        except:
            self.sampleIndex=1
        if self.plot:
            self.plot.deleteLater()
        self.statusBar().showMessage(self.sender().text())
        self.plot = MyplotMplCanvas(self.main_widget,width=5,hight=4,dpi=100,
                                    filePath=self.filePath,sampleIndex=self.sampleIndex)
        self.grid.addWidget(self.plot,1,3,3,1)
        self.sequencText.setText(self.plot.samplenumber[self.sampleIndex])
    def SaveFigButton(self):
        if self.plot:
            self.plot.fig.savefig(os.path.splitext(self.filePath)[0]+'.png')
        else:
            pass
    def SaveDataButton(self):
        if self.plot:
            dataFile = os.path.splitext(self.filePath)[0]+'_fit.dat'
            data = open(dataFile, 'w')
            #self.params,self.x_fit,self.y_gradient,self.y_fit,self.x_measure,self.y_measure=
            data.write('measured field'+'\n')
            data.write(str(self.plot.x_measure).strip('[]')+'\n')
            data.write('measured IRM'+'\n')
            data.write(str(self.plot.y_measure).strip('[]')+'\n')
            data.write('fitted field'+'\n')
            data.write(str(list(self.plot.outputXdata)).strip('[]')+'\n')
            data.write('fitted IRM'+'\n')
            data.write(str(list(sum(self.plot.outputYdata))).strip('[]')+'\n')
            for i in np.arange(len(self.plot.outputYdata)):
                data.write('fitted IRM component '+str(i+1)+'\n')
                data.write(str(list(self.plot.outputYdata[i])).strip('[]')+'\n')
        else:
            pass

    def fitButton(self):
        if self.clickCount !=0:
            self.removeGrid()
        else:
            self.introdueLabel.deleteLater()
        try:
            self.sampleIndex
        except:
            self.sampleIndex=1
        if self.plot:
            self.plot.deleteLater()
            plt.close(self.plot.fig)
        self.statusBar().showMessage(self.sender().text())
        self.groups = self.numberText.text()
        self.initParam = [self.pText.text(),self.aText.text(),self.bText.text()]
        self.plot = FitMplCanvas(self.main_widget,width=5,hight=4,dpi=100,filePath=self.filePath,
                                 groups=self.groups,sampleIndex=self.sampleIndex,initParam=self.initParam)
        self.grid.addWidget(self.plot,1,3,3,1)
        self.paramsGrid=self.showParams()
        self.grid.addLayout(self.paramsGrid,6,3,3,2)
        #self.grid.removeItem(subGrid)
        #self.grid.addLayout(paramsLayout,6,3,3,1)
        #self.sigmaValue.textEdited.connect(self.Adjust())
        self.clickCount +=1

    def removeGrid(self):
        for i in range(int(self.groups)*6):
            #print(self.subGrid.count())
            #print(i)
            self.paramsGrid.takeAt(int(self.paramsGrid.count())-1).widget().close()
        self.grid.removeItem(self.paramsGrid)

    def Adjust(self):
        print('ss')
    def btPrevious(self):
        if self.plot:
            self.plot.deleteLater()
            plt.close(self.plot.fig)
        if self.sampleIndex >1:
            self.sampleIndex=self.sampleIndex-1
            self.rawButton()
        else:
            pass
    def nextButton(self):
        if self.plot:
            self.plot.deleteLater()
            plt.close(self.plot.fig)
        self.sampleIndex=self.sampleIndex+1
        self.rawButton()
    def sequencChanged(self):
        try:
            self.sampleIndex=self.plot.samplenumber.index(self.sequencText.text())
            self.rawButton()
        except:
            pass





if __name__=='__main__':
    app = QApplication(sys.argv)
    Mwindow = Mainwindow()
    sys.exit(app.exec_())
